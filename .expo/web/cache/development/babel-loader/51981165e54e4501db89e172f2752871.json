{"ast":null,"code":"import { getCalendar, getCountry, getCurrencies, getLocales, getNumberFormatSettings, getTemperatureUnit, getTimeZone, handlers, uses24HourClock, usesAutoDateAndTime, usesAutoTimeZone, usesMetricSystem } from \"./module\";\n\nfunction logUnknownEvent(type) {\n  console.error(\"`\" + type + \"` is not a valid react-native-localize event\");\n}\n\nexport function addEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\nexport function removeEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\nexport function findBestAvailableLanguage(languageTags) {\n  var locales = getLocales();\n  var loweredLanguageTags = languageTags.map(function (tag) {\n    return tag.toLowerCase();\n  });\n\n  for (var i = 0; i < locales.length; i++) {\n    var currentLocale = locales[i];\n    var languageTag = currentLocale.languageTag,\n        languageCode = currentLocale.languageCode,\n        countryCode = currentLocale.countryCode,\n        isRTL = currentLocale.isRTL;\n    var languageTagIndex = loweredLanguageTags.indexOf(languageTag.toLowerCase());\n\n    if (languageTagIndex !== -1) {\n      return {\n        languageTag: languageTags[languageTagIndex],\n        isRTL: isRTL\n      };\n    }\n\n    var partialTagIndex = loweredLanguageTags.indexOf((languageCode + \"-\" + countryCode).toLowerCase());\n\n    if (partialTagIndex !== -1) {\n      return {\n        languageTag: languageTags[partialTagIndex],\n        isRTL: isRTL\n      };\n    }\n\n    var languageCodeIndex = loweredLanguageTags.indexOf(languageCode.toLowerCase());\n\n    if (languageCodeIndex !== -1) {\n      return {\n        languageTag: languageTags[languageCodeIndex],\n        isRTL: isRTL\n      };\n    }\n  }\n}\nexport { getCalendar, getCountry, getCurrencies, getLocales, getNumberFormatSettings, getTemperatureUnit, getTimeZone, uses24HourClock, usesAutoDateAndTime, usesAutoTimeZone, usesMetricSystem } from \"./module\";\nexport * from \"./types\";\nexport default {\n  getCalendar: getCalendar,\n  getCountry: getCountry,\n  getCurrencies: getCurrencies,\n  getLocales: getLocales,\n  getNumberFormatSettings: getNumberFormatSettings,\n  getTemperatureUnit: getTemperatureUnit,\n  getTimeZone: getTimeZone,\n  uses24HourClock: uses24HourClock,\n  usesAutoDateAndTime: usesAutoDateAndTime,\n  usesAutoTimeZone: usesAutoTimeZone,\n  usesMetricSystem: usesMetricSystem,\n  findBestAvailableLanguage: findBestAvailableLanguage,\n  addEventListener: addEventListener,\n  removeEventListener: removeEventListener\n};","map":{"version":3,"sources":["index.ts"],"names":["console","type","logUnknownEvent","handlers","locales","getLocales","loweredLanguageTags","languageTags","tag","i","currentLocale","isRTL","languageTagIndex","languageTag","partialTagIndex","languageCode","languageCodeIndex","getCalendar","getCountry","getCurrencies","getNumberFormatSettings","getTemperatureUnit","getTimeZone","uses24HourClock","usesAutoDateAndTime","usesAutoTimeZone","usesMetricSystem","findBestAvailableLanguage","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  handlers,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n} from \"./module\";\nimport { LocalizationEvent } from \"./types\";\n\nfunction logUnknownEvent(type: string) {\n  console.error(`\\`${type}\\` is not a valid react-native-localize event`);\n}\n\nexport function addEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\n\nexport function removeEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\n\nexport function findBestAvailableLanguage<T extends string>(\n  languageTags: ReadonlyArray<T>,\n): { languageTag: T; isRTL: boolean } | undefined {\n  const locales = getLocales();\n  const loweredLanguageTags = languageTags.map((tag) => tag.toLowerCase());\n\n  for (let i = 0; i < locales.length; i++) {\n    const currentLocale = locales[i];\n    const { languageTag, languageCode, countryCode, isRTL } = currentLocale;\n\n    const languageTagIndex = loweredLanguageTags.indexOf(\n      languageTag.toLowerCase(),\n    );\n\n    if (languageTagIndex !== -1) {\n      return { languageTag: languageTags[languageTagIndex], isRTL };\n    }\n\n    const partialTagIndex = loweredLanguageTags.indexOf(\n      (languageCode + \"-\" + countryCode).toLowerCase(),\n    );\n\n    if (partialTagIndex !== -1) {\n      return { languageTag: languageTags[partialTagIndex], isRTL };\n    }\n\n    const languageCodeIndex = loweredLanguageTags.indexOf(\n      languageCode.toLowerCase(),\n    );\n\n    if (languageCodeIndex !== -1) {\n      return { languageTag: languageTags[languageCodeIndex], isRTL };\n    }\n  }\n}\n\nexport {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n} from \"./module\";\nexport * from \"./types\";\n\nexport default {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n\n  findBestAvailableLanguage,\n  addEventListener,\n  removeEventListener,\n};\n"]},"metadata":{},"sourceType":"module"}